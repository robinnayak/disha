# views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from myapp.serializers import SeatSerializer

class ResetSeatsView(APIView):
    def post(self, request, *args, **kwargs):
        serializer = SeatSerializer()
        try:
            serializer.reset_all_seats()
            return Response({'message': 'Successfully reset all seats.'}, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
# urls.py
from django.urls import path
from .views import ResetSeatsView

urlpatterns = [
    path('reset-seats/', ResetSeatsView.as_view(), name='reset_seats'),
]



from django.utils import timezone
from django.db import models

class Trip(models.Model):
    vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE)
    start_datetime = models.DateTimeField()
    available_seat = models.PositiveIntegerField()
    
    def save(self, *args, **kwargs):
        # Check if the trip is scheduled for the next day and reset seats if necessary
        if self.pk is None:  # This check is for when the Trip instance is being created
            if self.start_datetime.date() == (timezone.now().date() + timezone.timedelta(days=1)):
                self.available_seat = self.vehicle.seating_capacity
        super().save(*args, **kwargs)

    def reset_vehicle_seats(self):
        """Reset the available seats to the vehicle's seating capacity."""
        self.available_seat = self.vehicle.seating_capacity
        self.save(update_fields=['available_seat'])
